{"code":"var meteor_1 = require('meteor/meteor');\r\nvar collections_1 = require('../imports/collections');\r\nvar check_1 = require('meteor/check');\r\nmeteor_1.Meteor.methods({\r\n    updateProfile: function (profile) {\r\n        if (!this.userId)\r\n            throw new meteor_1.Meteor.Error('unauthorized', 'User must be logged-in to create a new chat');\r\n        check_1.check(profile, {\r\n            name: nonEmptyString\r\n        });\r\n        meteor_1.Meteor.users.update(this.userId, {\r\n            $set: { profile: profile }\r\n        });\r\n    },\r\n    addMessage: function (type, chatId, content) {\r\n        if (!this.userId)\r\n            throw new meteor_1.Meteor.Error('unauthorized', 'User must be logged-in to create a new chat');\r\n        var chatExists = !!collections_1.Chats.collection.find(chatId).count();\r\n        if (!chatExists) {\r\n            throw new meteor_1.Meteor.Error('chat-not-exists', 'Chat doesn\\'t exist');\r\n        }\r\n        return {\r\n            messageId: collections_1.Messages.collection.insert({\r\n                chatId: chatId,\r\n                senderId: this.userId,\r\n                content: content,\r\n                createdAt: new Date(),\r\n                type: type\r\n            })\r\n        };\r\n    }\r\n});\r\n//# sourceMappingURL=methods.js.map","sourceMap":{"version":3,"file":"methods.js","sourceRoot":"","sources":["server/methods.ts"],"names":[],"mappings":"AAAA,uBAAuB,eAAe,CAAC,CAAA;AACvC,4BAAgC,wBAAwB,CAAC,CAAA;AAEzD,sBAA6B,cAAc,CAAC,CAAA;AAE5C,eAAM,CAAC,OAAO,CAAC;IAEb,aAAa,YAAC,OAAgB;QAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;YAAC,MAAM,IAAI,eAAM,CAAC,KAAK,CAAC,cAAc,EACrD,6CAA6C,CAAC,CAAC;QAEjD,aAAK,CAAC,OAAO,EAAE;YACb,IAAI,EAAE,cAAc;SACrB,CAAC,CAAC;QAEH,eAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,EAAE,EAAC,gBAAO,EAAC;SAChB,CAAC,CAAC;IACL,CAAC;IAED,UAAU,YAAC,IAAiB,EAAE,MAAc,EAAE,OAAe;QAC1D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;YAAC,MAAM,IAAI,eAAM,CAAC,KAAK,CAAC,cAAc,EACtD,6CAA6C,CAAC,CAAC;QAEjD,IAAM,UAAU,GAAG,CAAC,CAAC,mBAAK,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;QAE3D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,eAAM,CAAC,KAAK,CAAC,iBAAiB,EACtC,qBAAqB,CAAC,CAAC;QAC3B,CAAC;QAED,MAAM,CAAC;YACL,SAAS,EAAE,sBAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;gBACpC,MAAM,EAAE,MAAM;gBACb,QAAQ,EAAE,IAAI,CAAC,MAAM;gBACtB,OAAO,EAAE,OAAO;gBAChB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,IAAI,EAAE,IAAI;aACX,CAAC;SACH,CAAC;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Chats, Messages } from '../imports/collections';\r\nimport { MessageType, Profile } from '../imports/models';\r\nimport { check, Match } from 'meteor/check';\r\n\r\nMeteor.methods({\r\n\r\n  updateProfile(profile: Profile): void {\r\n    if (!this.userId) throw new Meteor.Error('unauthorized',\r\n      'User must be logged-in to create a new chat');\r\n \r\n    check(profile, {\r\n      name: nonEmptyString\r\n    });\r\n \r\n    Meteor.users.update(this.userId, {\r\n      $set: {profile}\r\n    });\r\n  },\r\n\r\n  addMessage(type: MessageType, chatId: string, content: string) {\r\n     if (!this.userId) throw new Meteor.Error('unauthorized',\r\n      'User must be logged-in to create a new chat');\r\n\r\n    const chatExists = !!Chats.collection.find(chatId).count();\r\n \r\n    if (!chatExists) {\r\n      throw new Meteor.Error('chat-not-exists',\r\n        'Chat doesn\\'t exist');\r\n    }\r\n \r\n    return {\r\n      messageId: Messages.collection.insert({\r\n        chatId: chatId,\r\n         senderId: this.userId,\r\n        content: content,\r\n        createdAt: new Date(),\r\n        type: type\r\n      })\r\n    };\r\n  }\r\n});"]},"version":"1","isExternal":true,"references":{"files":[],"modules":["imports/collections/index.ts","imports/models.ts"],"typings":[]},"diagnostics":{"syntacticErrors":[],"semanticErrors":[{"code":2304,"fileName":"server/methods.ts","message":"Cannot find name 'nonEmptyString'.","line":13,"column":13}]},"hash":"f13c9ebea989ace644cb6fb1637aded921c93c9c"}