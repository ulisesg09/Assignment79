{"code":"var core_1 = require('@angular/core');\r\nvar ionic_angular_1 = require('ionic-angular');\r\nvar meteor_rxjs_1 = require('meteor-rxjs');\r\nvar underscore_1 = require('meteor/underscore');\r\nvar Moment = require('moment');\r\nvar collections_1 = require('../../../../imports/collections');\r\nvar messages_html_1 = require('./messages.html');\r\nvar MessagesPage = (function () {\r\n    function MessagesPage(navParams, el) {\r\n        this.el = el;\r\n        this.message = '';\r\n        this.scrollOffset = 0;\r\n        this.selectedChat = navParams.get('chat');\r\n        this.title = this.selectedChat.title;\r\n        this.picture = this.selectedChat.picture;\r\n    }\r\n    Object.defineProperty(MessagesPage.prototype, \"messagesPageContent\", {\r\n        get: function () {\r\n            return this.el.nativeElement.querySelector('.messages-page-content');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MessagesPage.prototype, \"messagesList\", {\r\n        get: function () {\r\n            return this.messagesPageContent.querySelector('.messages');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MessagesPage.prototype, \"scroller\", {\r\n        get: function () {\r\n            return this.messagesList.querySelector('.scroll-content');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MessagesPage.prototype.ngOnInit = function () {\r\n        this.autoScroller = this.autoScroll();\r\n        this.subscribeMessages();\r\n        var isEven = false;\r\n        this.messages = collections_1.Messages.find({ chatId: this.selectedChat._id }, { sort: { createdAt: 1 } }).map(function (messages) {\r\n            messages.forEach(function (message) {\r\n                message.ownership = isEven ? 'mine' : 'other';\r\n                isEven = !isEven;\r\n            });\r\n            return messages;\r\n        });\r\n    };\r\n    MessagesPage.prototype.ngOnDestroy = function () {\r\n        this.autoScroller.disconnect();\r\n    };\r\n    MessagesPage.prototype.subscribeMessages = function () {\r\n        this.scrollOffset = this.scroller.scrollHeight;\r\n        this.messagesDayGroups = this.findMessagesDayGroups();\r\n    };\r\n    MessagesPage.prototype.findMessagesDayGroups = function () {\r\n        var isEven = false;\r\n        return collections_1.Messages.find({\r\n            chatId: this.selectedChat._id\r\n        }, {\r\n            sort: { createdAt: 1 }\r\n        })\r\n            .map(function (messages) {\r\n            var format = 'D MMMM Y';\r\n            // Compose missing data that we would like to show in the view\r\n            messages.forEach(function (message) {\r\n                message.ownership = isEven ? 'mine' : 'other';\r\n                isEven = !isEven;\r\n                return message;\r\n            });\r\n            // Group by creation day\r\n            var groupedMessages = underscore_1._.groupBy(messages, function (message) {\r\n                return Moment(message.createdAt).format(format);\r\n            });\r\n            // Transform dictionary into an array since Angular's view engine doesn't know how\r\n            // to iterate through it\r\n            return Object.keys(groupedMessages).map(function (timestamp) {\r\n                return {\r\n                    timestamp: timestamp,\r\n                    messages: groupedMessages[timestamp],\r\n                    today: Moment().format(format) === timestamp\r\n                };\r\n            });\r\n        });\r\n    };\r\n    MessagesPage.prototype.autoScroll = function () {\r\n        var autoScroller = new MutationObserver(this.scrollDown.bind(this));\r\n        autoScroller.observe(this.messagesList, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        return autoScroller;\r\n    };\r\n    MessagesPage.prototype.scrollDown = function () {\r\n        // Scroll down and apply specified offset\r\n        this.scroller.scrollTop = this.scroller.scrollHeight - this.scrollOffset;\r\n        // Zero offset for next invocation\r\n        this.scrollOffset = 0;\r\n    };\r\n    MessagesPage.prototype.onInputKeypress = function (_a) {\r\n        var keyCode = _a.keyCode;\r\n        if (keyCode === 13) {\r\n            this.sendTextMessage();\r\n        }\r\n    };\r\n    MessagesPage.prototype.sendTextMessage = function () {\r\n        var _this = this;\r\n        // If message was yet to be typed, abort\r\n        if (!this.message) {\r\n            return;\r\n        }\r\n        meteor_rxjs_1.MeteorObservable.call('addMessage', MessageType.TEXT, this.selectedChat._id, this.message).zone().subscribe(function () {\r\n            // Zero the input field\r\n            _this.message = '';\r\n        });\r\n    };\r\n    MessagesPage = __decorate([\r\n        core_1.Component({\r\n            template: messages_html_1.default\r\n        }), \r\n        __metadata('design:paramtypes', [Object, Object])\r\n    ], MessagesPage);\r\n    return MessagesPage;\r\n}());\r\nexports.MessagesPage = MessagesPage;\r\n//# sourceMappingURL=messages.js.map","sourceMap":{"version":3,"file":"messages.js","sourceRoot":"","sources":["client/imports/pages/messages/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnDestroy, OnInit, ElementRef } from '@angular/core';\r\nimport { NavParams } from 'ionic-angular';\r\nimport { MeteorObservable } from 'meteor-rxjs';\r\nimport { _ } from 'meteor/underscore';\r\nimport * as Moment from 'moment';\r\nimport { Observable } from 'rxjs';\r\nimport { Messages } from '../../../../imports/collections';\r\nimport { Chat, Message } from '../../../../imports/models';\r\nimport template from './messages.html';\r\n \r\n@Component({\r\n  template\r\n})\r\nexport class MessagesPage implements OnInit, OnDestroy {\r\n  selectedChat: Chat;\r\n  title: string;\r\n  picture: string;\r\n  messagesDayGroups;\r\n  messages: Observable<Message[]>;\r\n  message: string = '';\r\n  autoScroller: MutationObserver;\r\n  scrollOffset = 0;\r\n\r\n  constructor(\r\n    navParams: NavParams,\r\n    private el: ElementRef\r\n  ) {\r\n\r\n    this.selectedChat = <Chat>navParams.get('chat');\r\n    this.title = this.selectedChat.title;\r\n    this.picture = this.selectedChat.picture;\r\n  }\r\n\r\n  private get messagesPageContent(): Element {\r\n    return this.el.nativeElement.querySelector('.messages-page-content');\r\n  }\r\n \r\n  private get messagesList(): Element {\r\n    return this.messagesPageContent.querySelector('.messages');\r\n  }\r\n \r\n  private get scroller(): Element {\r\n    return this.messagesList.querySelector('.scroll-content');\r\n  }\r\n \r\n  ngOnInit()  {\r\n    this.autoScroller = this.autoScroll();\r\n\r\n    this.subscribeMessages();\r\n\r\n    let isEven = false;\r\n \r\n    this.messages = Messages.find(\r\n      {chatId: this.selectedChat._id},\r\n      {sort: {createdAt: 1}}\r\n    ).map((messages: Message[]) => {\r\n      messages.forEach((message: Message) => {\r\n        message.ownership = isEven ? 'mine' : 'other';\r\n        isEven = !isEven;\r\n      });\r\n \r\n      return messages;\r\n    });\r\n  }\r\n\r\nngOnDestroy() {\r\n    this.autoScroller.disconnect();\r\n  }\r\n\r\n  subscribeMessages() {\r\n    this.scrollOffset = this.scroller.scrollHeight;\r\n    this.messagesDayGroups = this.findMessagesDayGroups();\r\n  }\r\n \r\n  findMessagesDayGroups() {\r\n    let isEven = false;\r\n \r\n    return Messages.find({\r\n      chatId: this.selectedChat._id\r\n    }, {\r\n      sort: { createdAt: 1 }\r\n    })\r\n      .map((messages: Message[]) => {\r\n        const format = 'D MMMM Y';\r\n \r\n        // Compose missing data that we would like to show in the view\r\n        messages.forEach((message) => {\r\n          message.ownership = isEven ? 'mine' : 'other';\r\n          isEven = !isEven;\r\n \r\n          return message;\r\n        });\r\n \r\n        // Group by creation day\r\n        const groupedMessages = _.groupBy(messages, (message) => {\r\n          return Moment(message.createdAt).format(format);\r\n        });\r\n \r\n        // Transform dictionary into an array since Angular's view engine doesn't know how\r\n        // to iterate through it\r\n        return Object.keys(groupedMessages).map((timestamp: string) => {\r\n          return {\r\n            timestamp: timestamp,\r\n            messages: groupedMessages[timestamp],\r\n            today: Moment().format(format) === timestamp\r\n          };\r\n        });\r\n      });\r\n  }\r\n \r\n  autoScroll(): MutationObserver {\r\n    const autoScroller = new MutationObserver(this.scrollDown.bind(this));\r\n \r\n    autoScroller.observe(this.messagesList, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n \r\n    return autoScroller;\r\n  }\r\n \r\n  scrollDown(): void {\r\n    // Scroll down and apply specified offset\r\n    this.scroller.scrollTop = this.scroller.scrollHeight - this.scrollOffset;\r\n    // Zero offset for next invocation\r\n    this.scrollOffset = 0;\r\n  }\r\n  \r\n  onInputKeypress({ keyCode }: KeyboardEvent): void {\r\n    if (keyCode === 13) {\r\n      this.sendTextMessage();\r\n    }\r\n  }\r\n \r\n  sendTextMessage(): void {\r\n    // If message was yet to be typed, abort\r\n    if (!this.message) {\r\n      return;\r\n    }\r\n \r\n    MeteorObservable.call('addMessage', MessageType.TEXT,\r\n      this.selectedChat._id,\r\n      this.message\r\n    ).zone().subscribe(() => {\r\n      // Zero the input field\r\n      this.message = '';\r\n    });\r\n  }\r\n}"]},"version":"1","isExternal":true,"references":{"files":[],"modules":["imports/collections/index.ts","imports/models.ts"],"typings":[]},"diagnostics":{"syntacticErrors":[],"semanticErrors":[{"code":2304,"fileName":"client/imports/pages/messages/messages.ts","message":"Cannot find name 'OnInit'.","line":14,"column":38},{"code":2304,"fileName":"client/imports/pages/messages/messages.ts","message":"Cannot find name 'OnDestroy'.","line":14,"column":46},{"code":2304,"fileName":"client/imports/pages/messages/messages.ts","message":"Cannot find name 'Observable'.","line":19,"column":13},{"code":2304,"fileName":"client/imports/pages/messages/messages.ts","message":"Cannot find name 'NavParams'.","line":25,"column":16},{"code":2304,"fileName":"client/imports/pages/messages/messages.ts","message":"Cannot find name 'ElementRef'.","line":26,"column":17},{"code":2304,"fileName":"client/imports/pages/messages/messages.ts","message":"Cannot find name 'MessageType'.","line":141,"column":41}]},"hash":"e1fd7383ae5188e3248b98ab4926f7f33ad3a03f"}