{"code":"var core_1 = require('@angular/core');\r\nvar ionic_angular_1 = require('ionic-angular');\r\nvar accounts_base_1 = require('meteor/accounts-base');\r\nvar meteor_1 = require('meteor/meteor');\r\nvar PhoneService = (function () {\r\n    function PhoneService(platform) {\r\n        this.platform = platform;\r\n    }\r\n    PhoneService.prototype.verify = function (phoneNumber) {\r\n        return new Promise(function (resolve, reject) {\r\n            accounts_base_1.Accounts.requestPhoneVerification(phoneNumber, function (e) {\r\n                if (e) {\r\n                    return reject(e);\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    };\r\n    PhoneService.prototype.login = function (phoneNumber, code) {\r\n        return new Promise(function (resolve, reject) {\r\n            accounts_base_1.Accounts.verifyPhone(phoneNumber, code, function (e) {\r\n                if (e) {\r\n                    return reject(e);\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    };\r\n    PhoneService.prototype.logout = function () {\r\n        return new Promise(function (resolve, reject) {\r\n            meteor_1.Meteor.logout(function (e) {\r\n                if (e) {\r\n                    return reject(e);\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    };\r\n    PhoneService = __decorate([\r\n        core_1.Injectable(), \r\n        __metadata('design:paramtypes', [Object])\r\n    ], PhoneService);\r\n    return PhoneService;\r\n}());\r\nexports.PhoneService = PhoneService;\r\n//# sourceMappingURL=phone.js.map","sourceMap":{"version":3,"file":"phone.js","sourceRoot":"","sources":["client/imports/services/phone.ts"],"names":[],"mappings":"AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,8BAAyB,eAAe,CAAC,CAAA;AACzC,8BAAyB,sBAAsB,CAAC,CAAA;AAChD,uBAAuB,eAAe,CAAC,CAAA;AAGvC;IACE,sBAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAEtC,CAAC;IAED,6BAAM,GAAN,UAAO,WAAmB;QACxB,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,wBAAQ,CAAC,wBAAwB,CAAC,WAAW,EAAE,UAAC,CAAQ;gBACtD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnB,CAAC;gBAED,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4BAAK,GAAL,UAAM,WAAmB,EAAE,IAAY;QACrC,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,wBAAQ,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE,UAAC,CAAQ;gBAC/C,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnB,CAAC;gBAED,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,6BAAM,GAAN;QACE,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,eAAM,CAAC,MAAM,CAAC,UAAC,CAAQ;gBACrB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnB,CAAC;gBAED,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAxCH;QAAC,iBAAU,EAAE;;oBAAA;IAyCb,mBAAC;AAAD,CAAC,AAxCD,IAwCC;AAxCY,oBAAY,eAwCxB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Platform } from 'ionic-angular';\r\nimport { Accounts } from 'meteor/accounts-base';\r\nimport { Meteor } from 'meteor/meteor';\r\n \r\n@Injectable()\r\nexport class PhoneService {\r\n  constructor(private platform: Platform) {\r\n \r\n  }\r\n \r\n  verify(phoneNumber: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      Accounts.requestPhoneVerification(phoneNumber, (e: Error) => {\r\n        if (e) {\r\n          return reject(e);\r\n        }\r\n \r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n \r\n  login(phoneNumber: string, code: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      Accounts.verifyPhone(phoneNumber, code, (e: Error) => {\r\n        if (e) {\r\n          return reject(e);\r\n        }\r\n \r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n \r\n  logout(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      Meteor.logout((e: Error) => {\r\n        if (e) {\r\n          return reject(e);\r\n        }\r\n \r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n}"]},"version":"1","isExternal":true,"references":{"files":[],"modules":[],"typings":[]},"diagnostics":{"syntacticErrors":[],"semanticErrors":[{"code":2304,"fileName":"client/imports/services/phone.ts","message":"Cannot find name 'Platform'.","line":8,"column":33}]},"hash":"82434b274364f67d8ab4c4af98d5049ec4990540"}